import requests
import psycopg2
import telebot
from telebot import types

token = '7442990666:AAHjb16py4B2rsdi4Rs4fdVGHOCAlT5QLBU'

bot = telebot.TeleBot(token)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = psycopg2.connect(
       dbname="postgres",
       user="postgres",
       password="los",
       host="postgres",
       port="5432"
)

cur = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–¥ –∏ –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π


def get_vacancies_from_hh(city, vacancy):
    headers = {
        'Authorization': 'Bearer APPLJUL05UFUADFTH956A0VCG16QATBP64CKMB75O5OIH4MEN19SKP15JT3U6N91'}
    params = {'text': vacancy, 'area': get_area_id(city), 'per_page': '100'}
    print(get_area_id(city))
    cur.execute("""
        CREATE TABLE IF NOT EXISTS vacancies (
            id INTEGER,
            name VARCHAR(255),
            employer VARCHAR(255),
            salary_from INTEGER,
            salary_to INTEGER,
            currency VARCHAR(10),
            area_name VARCHAR(255),
            street_name VARCHAR(255),
            employment VARCHAR(255),
            experience VARCHAR(255),
            schedule VARCHAR(255),
            link VARCHAR(255)
        )
    """)
    conn.commit()

    url = 'https://api.hh.ru/vacancies'
    response = requests.get(url, headers=headers, params=params)
    data = response.json()
    for vacancy in data['items']:
        save_vacancy_to_db(vacancy)

# –ü–æ–ª—É—á–µ–Ω–∏–µ id –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏


def get_area_id(city):
    if city == "–ú–æ—Å–∫–≤–∞":
        return 1
    elif city == "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥":
        return 2
    elif city == "–ú—ã—Ç–∏—â–∏":
        return 2041
    elif city == "–•–∏–º–∫–∏":
        return 2077
    elif city == "–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π":
        return 2085
    elif city == "–†–µ—É—Ç–æ–≤":
        return 2094
    elif city == "–õ—é–±–µ—Ä—Ü—ã":
        return 2039
    else:
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã start


@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –≤–∞–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö:\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ,'
        ' –≤–≤–µ–¥–∏—Ç–µ /start')
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ú–æ—Å–∫–≤–∞")
    item2 = types.KeyboardButton("–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
    item3 = types.KeyboardButton("–ú—ã—Ç–∏—â–∏")
    item4 = types.KeyboardButton("–•–∏–º–∫–∏")
    item5 = types.KeyboardButton("–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π")
    item6 = types.KeyboardButton("–†–µ—É—Ç–æ–≤")
    item7 = types.KeyboardButton("–õ—é–±–µ—Ä—Ü—ã")
    markup.add(item1, item2, item3, item4, item5, item6, item7)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:', reply_markup=markup)


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
selected_vacancy = None
selected_salary_from = None
selected_salary_to = None
selected_employment = None
selected_schedule = None

global selected_city


@bot.message_handler(
    func=lambda message: message.text in [
        "–ú–æ—Å–∫–≤–∞",
        "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "–ú—ã—Ç–∏—â–∏",
        "–•–∏–º–∫–∏",
        "–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π",
        "–†–µ—É—Ç–æ–≤",
        "–õ—é–±–µ—Ä—Ü—ã"])
def city_selected(message):
    global selected_city
    selected_city = message.text
    markup = types.ReplyKeyboardRemove()
    bot.send_message(
        message.chat.id,
        '–û—Ç–ª–∏—á–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:',
        reply_markup=markup)
    bot.register_next_step_handler(message, vacancy_selected)


@bot.message_handler(func=lambda message: message.text not in [
    "–ú–æ—Å–∫–≤–∞",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    "–ú—ã—Ç–∏—â–∏",
    "–•–∏–º–∫–∏",
    "–î–æ–ª–≥–æ–ø—Ä—É–¥–Ω—ã–π",
    "–†–µ—É—Ç–æ–≤",
    "–õ—é–±–µ—Ä—Ü—ã"])
def invalid_city(message):
    bot.send_message(
        message.chat.id,
        '–ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ—Ä–æ–¥! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤.')
    start_message(message)  # –í—ã–∑–æ–≤ start_message –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–∏


@bot.message_handler(func=lambda message: message.text)
def vacancy_selected(message):
    global selected_vacancy
    selected_vacancy = message.text
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ó–∞—Ä–ø–ª–∞—Ç–∞"),
                 types.KeyboardButton("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"),
                 types.KeyboardButton("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"),
                 types.KeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å"))

    bot.send_message(
        message.chat.id,
        '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:',
        reply_markup=keyboard)
    bot.register_next_step_handler(message, filter_selected)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–∞
def filter_selected(message):
    if message.text == '–ó–∞—Ä–ø–ª–∞—Ç–∞':
        bot.send_message(
            message.chat.id,
            '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∂–µ–ª–∞–µ–º—É—é –∑–∞—Ä–ø–ª–∞—Ç—É\n –í–≤–æ–¥–∏—Ç–µ —Å–ª–∏—Ç–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –≤–∞–ª—é—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 30000')
        bot.register_next_step_handler(message, salary_from_selected)
    elif message.text == '–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏':
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å")
        item2 = types.KeyboardButton("–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å")
        item3 = types.KeyboardButton("–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        item4 = types.KeyboardButton("–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        markup.add(item1, item2, item3, item4)
        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏:',
            reply_markup=markup)
        bot.register_next_step_handler(message, employment_selected)
    elif message.text == '–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã':
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å")
        item2 = types.KeyboardButton("–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫")
        item3 = types.KeyboardButton("–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫")
        item4 = types.KeyboardButton("–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞")
        markup.add(item1, item2, item3, item4)
        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:',
            reply_markup=markup)
        bot.register_next_step_handler(message, schedule_selected)
    elif message.text == '–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å':
        show_vacancies(message)
    else:
        bot.send_message(
            message.chat.id,
            '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.')
        bot.register_next_step_handler(message, filter_selected)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã


def salary_from_selected(message):
    global selected_salary_from
    if message.text.isdigit():  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        selected_salary_from = int(message.text)
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton("‚úî –î–∞"),
            types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å"))
        bot.send_message(
            message.chat.id,
            '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä?',
            reply_markup=keyboard)
        bot.register_next_step_handler(message, add_filter)
    else:
        bot.send_message(
            message.chat.id,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: 30000')
        bot.register_next_step_handler(message, salary_from_selected)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏


def employment_selected(message):
    global selected_employment
    selected_employment = message.text
    if message.text in [
        "–ü–æ–ª–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
        "–ß–∞—Å—Ç–∏—á–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å",
        "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
            "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"]:
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton("‚úî –î–∞"),
            types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å"))
        bot.send_message(
            message.chat.id,
            '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä?',
            reply_markup=keyboard)
        bot.register_next_step_handler(message, add_filter)
    else:
        bot.send_message(
            message.chat.id,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        bot.register_next_step_handler(message, employment_selected)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã


def schedule_selected(message):
    global selected_schedule
    selected_schedule = message.text
    if message.text in [
        "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å",
        "–°–º–µ–Ω–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫",
        "–ì–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫",
            "–£–¥–∞–ª–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞"]:
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton("‚úî –î–∞"),
            types.KeyboardButton("‚ùå –ù–µ—Ç"))
        keyboard.add(types.KeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å"))
        bot.send_message(
            message.chat.id,
            '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω —Ñ–∏–ª—å—Ç—Ä?',
            reply_markup=keyboard)
        bot.register_next_step_handler(message, add_filter)
    else:
        bot.send_message(
            message.chat.id,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.')
        bot.register_next_step_handler(message, schedule_selected)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤


def add_filter(message):
    if message.text.lower() == '‚úî –¥–∞':
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add(types.KeyboardButton("–ó–∞—Ä–ø–ª–∞—Ç–∞"),
                     types.KeyboardButton("–¢–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏"),
                     types.KeyboardButton("–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"),
                     types.KeyboardButton("–ù–∏—á–µ–≥–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å"))

        bot.send_message(
            message.chat.id,
            '–í—ã–±–µ—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:\n',
            reply_markup=keyboard)
        bot.register_next_step_handler(message, filter_selected)
    elif message.text.lower() == '‚ùå –Ω–µ—Ç':
        show_vacancies(message)
    elif message.text.lower() == 'üîÑ —Å–±—Ä–æ—Å–∏—Ç—å':
        start_message(message)
    else:
        print(message.text.lower())
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–î–∞', '–ù–µ—Ç' –∏–ª–∏ '–°–±—Ä–æ—Å–∏—Ç—å'.")
        bot.register_next_step_handler(message, add_filter)


def save_vacancy_to_db(vacancy):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    idv = vacancy['id']
    name = vacancy['name']
    salary = vacancy['salary']
    salary_from = salary['from'] if salary else None
    salary_to = salary['to'] if salary else None
    currency = salary['currency'] if salary else None
    area_name = vacancy['area']['name']
    address = vacancy['address']
    street_name = address['raw'] if address else None
    employer = vacancy['employer']
    employer_name = employer['name'] if employer else None
    employment = vacancy['employment']
    employment_name = employment['name'] if employment else None
    experience = vacancy['experience']
    experience_name = experience['name']
    schedule = vacancy['schedule']
    schedule_name = schedule['name']
    link = vacancy['alternate_url']

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    cur.execute("""
                    SELECT 1 FROM Vacancies
                    WHERE id = %s
                    LIMIT 1
                """, (idv,))

    if cur.fetchone() is None:
        # –ï—Å–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
        cur.execute(
            """
                        INSERT INTO Vacancies (id, name, area_name, salary_from, salary_to, currency, street_name,
                        employer, employment, experience, schedule, link)
                        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                    """,
            (idv,
             name,
             area_name,
             salary_from,
             salary_to,
             currency,
             street_name,
             employer_name,
             employment_name,
             experience_name,
             schedule_name,
             link))
        conn.commit()


def show_vacancies(message, page=1):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤–∞–∫–∞–Ω—Å–∏–π
    global selected_city, selected_vacancy
    get_vacancies_from_hh(
        selected_city,
        selected_vacancy)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å HH

    sql_query = f"SELECT * FROM Vacancies WHERE name LIKE '%{selected_vacancy}%' AND area_name = '{selected_city}'"
    print(sql_query)
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø. —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if selected_salary_from is not None:
        sql_query += f" AND salary_from >= {selected_salary_from}"
    if selected_employment is not None:
        sql_query += f" AND employment = '{selected_employment}'"
    if selected_schedule is not None:
        sql_query += f" AND schedule = '{selected_schedule}'"

    cur.execute(sql_query)
    vacancies = cur.fetchall()

    if vacancies:
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Ç–µ–∫—É—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancy_index = (page - 1) % len(vacancies)
        vacancy = vacancies[vacancy_index]

        # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
        name = vacancy[1]
        employer = vacancy[2]
        salary_from = vacancy[3]
        salary_to = vacancy[4]
        currency = vacancy[5]
        area = vacancy[6]
        address = vacancy[7]
        employment = vacancy[8]
        experience = vacancy[9]
        schedule = vacancy[10]
        link = vacancy[11]

        salary_from = salary_from if salary_from else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        salary_to = salary_to if salary_to else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        currency = currency if currency else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        address = address if address else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        employment = employment if employment else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        experience = experience if experience else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        schedule = schedule if schedule else "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        bot.send_message(
            message.chat.id, f"{name}\n–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_from} - {salary_to} {currency}\n"
            f"–ê–¥—Ä–µ—Å: {address}\n–ì–æ—Ä–æ–¥: {area}\n–ó–∞–Ω—è—Ç–æ—Å—Ç—å: {employment}\n–û–ø—ã—Ç: {experience}\n"
            f"–ì—Ä–∞—Ñ–∏–∫: {schedule}\n–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å: {employer}\n–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {link}")

        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton("‚û°Ô∏è –î–∞"),
            types.KeyboardButton("‚ùå –ù–µ—Ç"))
        bot.send_message(
            message.chat.id,
            "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é?",
            reply_markup=keyboard)
        bot.register_next_step_handler(
            message, lambda m: handle_next_vacancy(
                m, page + 1))
    else:
        bot.send_message(
            message.chat.id,
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(
            types.KeyboardButton("‚û°Ô∏è –î–∞"),
            types.KeyboardButton("‚ùå –ù–µ—Ç"))
        bot.send_message(
            message.chat.id,
            "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?",
            reply_markup=keyboard)
        bot.register_next_step_handler(message, start_over)


def handle_next_vacancy(message, page):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

    if message.text.lower() == "‚û°Ô∏è –¥–∞":
        show_vacancies(message, page)  # –í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    else:
        bot.send_message(
            message.chat.id,
            "–•–æ—Ä–æ—à–æ. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä.",
            reply_markup=types.ReplyKeyboardRemove())
        start_over(message)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


def start_over(message):
    if message.text.lower() == "‚û°Ô∏è –¥–∞":
        start_message(message)
    else:
        bot.send_message(
            message.chat.id,
            "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä, –≤–≤–µ–¥–∏—Ç–µ /start")


bot.infinity_polling()
